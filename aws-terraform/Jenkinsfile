pipeline {
    agent any
    tools {
        jdk 'JDK17'
        nodejs 'nodejs'
        maven 'MAVEN'
        
    }
    //sonar scanner tool
    environment  {
        SCANNER_HOME=tool 'sonarin'
        AWS_ACCOUNT_ID = credentials('AWS_ID') //change
        AWS_ECR_REPO_NAME = credentials('Repo1') //change 
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
        GIT_REPO_NAME = 'End-to-End-Kubernetes-Three-Tier-DevSecOps-Project'
        GIT_USER_NAME = 'MuflihItsuka312'
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                 git credentialsId: 'GITHUB', url: 'https://github.com/MuflihItsuka312/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }
    //     stage("SonarQube Analysis"){
    //       steps {
	   //        script {
		  //      withSonarQubeEnv(credentialsId: 'sonarin') { 
    //                     sh "mvn sonar:sonar"
		  //      }
	   //        }	
    //       }
    //   }

        // stage('Quality Check') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonarin' 
        //         }
        //     }
        // }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/frontend') {
                    dependencyCheck additionalArguments: '--format --scan', odcInstallation: 'DP-Check'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                     withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-key']]){
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                     }
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
     
           stage('Update Deployment file') {
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'GITHUB', variable: 'GITHUB_TOKEN')]) {
                        script {
                            sh '''
                            git config user.email "xxgdxxfbiswatboy@gmail.com"
                            git config user.name "MuflihItsuka312"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                        }
                    }
                }
            }
        }
    }
  post {
        always {
            script {
                emailext attachLog: true,
                    subject: "'${currentBuild.result}'",
                    body: "Project: ${env.JOB_NAME}<br/>" +
                        "Build Number: ${env.BUILD_NUMBER}<br/>" +
                        "URL: ${env.BUILD_URL}<br/>",
                    to: 'fasya.muflih05@gmail.com',
                    attachmentsPattern: 'trivyfs-frontend*.txt, trivyimage*.txt'
            }
        }
    }
}
  
